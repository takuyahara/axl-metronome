// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Axl Metronome isDescEnabled = true reset metronome if tempo has change when running 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              170
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              70
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 170,
          "to": 70,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 170,
              "to": 70,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={170}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                170
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true swipe tempo.from => tempo.from > tempo.to 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              170
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 170,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 170,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={170}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                170
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true swipe tempo.from 10 times => tempo.from is in range 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              780
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 780,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 780,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={780}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                780
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true swipe tempo.to => tempo.from > tempo.to 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              70
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 70,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 70,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                90
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true swipe tempo.to 10 times => tempo.to is in range 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              60
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 60,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 60,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                90
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from < tempo.to start metronome => complete 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                90
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from < tempo.to start metronome 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="455.53093477052 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    15:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                120
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from === tempo.to start metronome => complete 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 150,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 150,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={150}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                150
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from === tempo.to start metronome 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              150
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 150,
          "to": 150,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="455.53093477052 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    15:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 150,
              "to": 150,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={150}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                150
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from > tempo.to start metronome => complete 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              70
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 70,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="0 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    30:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 70,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                90
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;

exports[`Axl Metronome isDescEnabled = true tempo.from > tempo.to start metronome 1`] = `
<AxlMetronome
  isDescEnabled={true}
  maxDelta={100}
  range={
    Object {
      "from": 60,
      "to": 780,
    }
  }
  remaining={1800}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div
    className="AxlMetronome"
  >
    <TempoSelector
      defaultTempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
      inheritedSelector={null}
      isDescEnabled={true}
      maxDelta={100}
      postProcess={
        Object {
          "onChangeTempo": [Function],
        }
      }
      range={
        Object {
          "from": 60,
          "to": 780,
        }
      }
    >
      <div
        className="tempoSelector"
      >
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="from"
          tempo={90}
        >
          <div
            className="from"
            data-testid="temposelector-from"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              90
            </span>
          </div>
        </Tempo>
        <Tempo
          inheritedSelector={null}
          maxDelta={100}
          onChangeTempo={[Function]}
          range={
            Object {
              "from": 60,
              "to": 780,
            }
          }
          role="to"
          tempo={150}
        >
          <div
            className="to"
            data-testid="temposelector-to"
            onMouseDown={[Function]}
            onMouseMove={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          >
            <span>
              70
            </span>
          </div>
        </Tempo>
      </div>
    </TempoSelector>
    <Counter
      remaining={1800}
      tempo={
        Object {
          "from": 90,
          "to": 70,
        }
      }
    >
      <div>
        <Time
          postProcess={
            Object {
              "Ring": Object {
                "onMouseDown": [Function],
                "onMouseMove": [Function],
                "onMouseUp": [Function],
              },
            }
          }
          remaining={1800}
        >
          <div
            className="time"
          >
            <RingStepped
              inheritedSelector={null}
              mouseEvent={
                Object {
                  "onMouseDown": [Function],
                  "onMouseMove": [Function],
                  "onMouseUp": [Function],
                }
              }
              step={1800}
            >
              <div
                className="ring"
              >
                <svg>
                  <defs>
                    <radialGradient
                      gradientUnits="userSpaceOnUse"
                      id="maskGradient"
                      spreadMethod="reflect"
                    >
                      <stop
                        offset="30%"
                      />
                      <stop
                        offset="100%"
                      />
                    </radialGradient>
                  </defs>
                  <circle
                    className="remaining"
                  />
                  <circle
                    className="mask"
                    stroke="url(#maskGradient)"
                    strokeDasharray="455.53093477052 911.06186954104"
                  />
                  <circle
                    className="tapArea"
                    data-testid="ring-taparea"
                    onMouseDown={[Function]}
                    onTouchStart={[Function]}
                  />
                  <circle
                    className="tapAreaMask"
                  />
                </svg>
                <div
                  className="globalTapArea"
                  data-is-bubbled={false}
                  data-testid="ring-global-taparea"
                  onMouseMove={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                />
              </div>
            </RingStepped>
            <Indicator
              inheritedSelector={null}
              postProcess={
                Object {
                  "onCount": [Function],
                  "onCountComplete": [Function],
                  "onCountPause": [Function],
                  "onCountResume": [Function],
                  "onCountStart": [Function],
                  "onCountStop": [Function],
                }
              }
              timeToCount={1800}
            >
              <Remaining
                inheritedSelector={null}
                postProcess={
                  Object {
                    "onClick": [Function],
                    "onTouchEnd": [Function],
                  }
                }
                timeToCount={1800}
              >
                <div
                  className="indicator"
                  data-testid="indicator-remaining"
                  onClick={[Function]}
                  onTouchEnd={[Function]}
                >
                  <div
                    className="remaining"
                  >
                    15:00
                  </div>
                </div>
              </Remaining>
              <Timer
                postProcess={
                  Object {
                    "onCount": [Function],
                    "onCountComplete": [Function],
                    "onCountPause": [Function],
                    "onCountResume": [Function],
                    "onCountStart": [Function],
                    "onCountStop": [Function],
                  }
                }
                timeToCount={1800}
              />
            </Indicator>
          </div>
        </Time>
        <BeatAxl
          postProcess={
            Object {
              "onComplete": [Function],
              "onPause": [Function],
              "onResume": [Function],
              "onStart": [Function],
              "onStop": [Function],
              "onTick": [Function],
            }
          }
          remaining={1800}
          tempo={
            Object {
              "from": 90,
              "to": 70,
            }
          }
        >
          <Beat
            inheritedSelector={Object {}}
            postProcess={
              Object {
                "onPause": [Function],
                "onResume": [Function],
                "onStart": [Function],
                "onStop": [Function],
                "onTick": [Function],
              }
            }
            tempo={90}
          >
            <div
              className="tempo"
            >
              <div
                className="tapArea"
                data-testid="beat-taparea"
                onClick={[Function]}
              >
                80
              </div>
            </div>
          </Beat>
        </BeatAxl>
      </div>
    </Counter>
  </div>
</AxlMetronome>
`;
