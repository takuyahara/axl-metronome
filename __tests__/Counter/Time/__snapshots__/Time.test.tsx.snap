// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Ring with post process MouseEvent Time is not running Indicator.click 1 time 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Indicator.click 2 times 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Indicator.click 3 times 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="364.424747816416 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:06
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Indicator.click and complete counting down 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click and complete counting down 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Ring.mousedown => Ring.mouseup => Indicator.click and complete counting down 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Ring.mousedown => Ring.mouseup 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is not running Ring.mousedown 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="637.743308678728 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:03
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is running Ring.mousedown => Ring.mousemove => Ring.mouseup and complete counting down 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is running Ring.mousedown => Ring.mousemove 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is running Ring.mousedown => Ring.mouseup and complete counting down 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring with post process MouseEvent Time is running Ring.mousedown 1`] = `
<Time
  postProcess={
    Object {
      "Indicator": Object {
        "onCount": [Function],
        "onCountComplete": [Function],
        "onCountPause": [Function],
        "onCountResume": [Function],
        "onCountStart": [Function],
        "onCountStop": [Function],
      },
      "Ring": Object {
        "onMouseDown": [Function],
        "onMouseMove": [Function],
        "onMouseUp": [Function],
      },
    }
  }
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Indicator.click 1 time 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Indicator.click 2 times 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Indicator.click 3 times 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="364.424747816416 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:06
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Indicator.click and complete counting down 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click and complete counting down 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown => Ring.mousemove 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown => Ring.mouseup => Indicator.click and complete counting down 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown => Ring.mouseup 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is not running Ring.mousedown 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="364.424747816416 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:06
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown => Ring.mousemove => Ring.mouseup and complete counting down 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown => Ring.mousemove 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="182.212373908208 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:08
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown => Ring.mouseup 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="637.743308678728 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:03
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown => Ring.mouseup and complete counting down 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process MouseEvent Time is running Ring.mousedown 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={true}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process calls control function 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="0 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:10
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;

exports[`Ring without post process set/get progress 1`] = `
<Time
  remaining={10}
>
  <div
    className="time"
  >
    <RingStepped
      inheritedSelector={null}
      mouseEvent={
        Object {
          "onMouseDown": [Function],
          "onMouseMove": [Function],
          "onMouseUp": [Function],
        }
      }
      step={10}
    >
      <div
        className="ring"
      >
        <svg>
          <defs>
            <radialGradient
              gradientUnits="userSpaceOnUse"
              id="maskGradient"
              spreadMethod="reflect"
            >
              <stop
                offset="30%"
              />
              <stop
                offset="100%"
              />
            </radialGradient>
          </defs>
          <circle
            className="remaining"
          />
          <circle
            className="mask"
            stroke="url(#maskGradient)"
            strokeDasharray="455.53093477052 911.06186954104"
          />
          <circle
            className="tapArea"
            data-testid="ring-taparea"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
          />
          <circle
            className="tapAreaMask"
          />
        </svg>
        <div
          className="globalTapArea"
          data-is-bubbled={false}
          data-testid="ring-global-taparea"
          onMouseMove={[Function]}
          onMouseUp={[Function]}
        />
      </div>
    </RingStepped>
    <Indicator
      inheritedSelector={null}
      postProcess={
        Object {
          "onCount": [Function],
          "onCountComplete": [Function],
          "onCountPause": [Function],
          "onCountResume": [Function],
          "onCountStart": [Function],
          "onCountStop": [Function],
        }
      }
      timeToCount={10}
    >
      <Remaining
        inheritedSelector={null}
        postProcess={
          Object {
            "onClick": [Function],
            "onTouchEnd": [Function],
          }
        }
        timeToCount={10}
      >
        <div
          className="indicator"
          data-testid="indicator-remaining"
          onClick={[Function]}
          onTouchEnd={[Function]}
        >
          <div
            className="remaining"
          >
            00:05
          </div>
        </div>
      </Remaining>
      <Timer
        postProcess={
          Object {
            "onCount": [Function],
            "onCountComplete": [Function],
            "onCountPause": [Function],
            "onCountResume": [Function],
            "onCountStart": [Function],
            "onCountStop": [Function],
          }
        }
        timeToCount={10}
      />
    </Indicator>
  </div>
</Time>
`;
