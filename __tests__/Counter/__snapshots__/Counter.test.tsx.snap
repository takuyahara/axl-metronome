// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Indicator.click 1 time 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            93
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Indicator.click 2 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            93
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Indicator.click 3 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="121.47491593880531 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:26
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            96
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="273.318560862312 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:21
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            107
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            104
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            104
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="516.2683927399227 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:13
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            123
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is not started Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            104
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            104
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            104
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from < tempo.to MouseEvent Timer is running Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 150,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 150,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Indicator.click 1 time 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Indicator.click 2 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Indicator.click 3 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="121.47491593880531 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:26
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="273.318560862312 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:21
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="516.2683927399227 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:13
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is not started Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from === tempo.to MouseEvent Timer is running Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 90,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 90,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={90}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            90
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            150
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Indicator.click 1 time 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            147
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Indicator.click 2 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="60.7374579694026 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:28
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            147
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Indicator.click 3 times 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="121.47491593880531 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:26
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            144
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            150
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="273.318560862312 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:21
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            133
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            136
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            136
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            150
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="516.2683927399227 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:13
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            117
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is not started Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            136
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            150
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            136
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mousemove 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="212.58110289290934 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:23
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            136
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => Indicator.click 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup => complete countdown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="0 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:30
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            150
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown => Ring.mouseup 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={false}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;

exports[`Counter tempo.from > tempo.to MouseEvent Timer is running Ring.mousedown 1`] = `
<Counter
  remaining={30}
  tempo={
    Object {
      "from": 150,
      "to": 90,
    }
  }
>
  <div>
    <Time
      postProcess={
        Object {
          "Ring": Object {
            "onMouseDown": [Function],
            "onMouseMove": [Function],
            "onMouseUp": [Function],
          },
        }
      }
      remaining={30}
    >
      <div
        className="time"
      >
        <RingStepped
          inheritedSelector={null}
          mouseEvent={
            Object {
              "onMouseDown": [Function],
              "onMouseMove": [Function],
              "onMouseUp": [Function],
            }
          }
          step={30}
        >
          <div
            className="ring"
          >
            <svg>
              <defs>
                <radialGradient
                  gradientUnits="userSpaceOnUse"
                  id="maskGradient"
                  spreadMethod="reflect"
                >
                  <stop
                    offset="30%"
                  />
                  <stop
                    offset="100%"
                  />
                </radialGradient>
              </defs>
              <circle
                className="remaining"
                cx={150}
                cy={150}
                r={0}
              />
              <circle
                className="mask"
                cx={150}
                cy={150}
                r={0}
                stroke="url(#maskGradient)"
                strokeDasharray="455.53093477052 911.06186954104"
              />
              <circle
                className="tapArea"
                cx={150}
                cy={150}
                data-testid="ring-taparea"
                onMouseDown={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                r={0}
              />
              <circle
                className="tapAreaMask"
                cx={150}
                cy={150}
                r={0}
              />
            </svg>
            <div
              className="globalTapArea"
              data-is-bubbled={true}
              data-testid="ring-global-taparea"
              onMouseMove={[Function]}
              onMouseUp={[Function]}
            />
          </div>
        </RingStepped>
        <Indicator
          inheritedSelector={null}
          postProcess={
            Object {
              "onCount": [Function],
              "onCountComplete": [Function],
              "onCountPause": [Function],
              "onCountResume": [Function],
              "onCountStart": [Function],
              "onCountStop": [Function],
            }
          }
          timeToCount={30}
        >
          <Remaining
            inheritedSelector={null}
            postProcess={
              Object {
                "onClick": [Function],
                "onTouchEnd": [Function],
              }
            }
            timeToCount={30}
          >
            <div
              className="indicator"
              data-testid="indicator-remaining"
              onClick={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className="remaining"
              >
                00:15
              </div>
            </div>
          </Remaining>
          <Timer
            postProcess={
              Object {
                "onCount": [Function],
                "onCountComplete": [Function],
                "onCountPause": [Function],
                "onCountResume": [Function],
                "onCountStart": [Function],
                "onCountStop": [Function],
              }
            }
            timeToCount={30}
          />
        </Indicator>
      </div>
    </Time>
    <BeatAxl
      postProcess={
        Object {
          "onComplete": [Function],
          "onPause": [Function],
          "onResume": [Function],
          "onStart": [Function],
          "onStop": [Function],
          "onTick": [Function],
        }
      }
      remaining={30}
      tempo={
        Object {
          "from": 150,
          "to": 90,
        }
      }
    >
      <Beat
        inheritedSelector={Object {}}
        postProcess={
          Object {
            "onPause": [Function],
            "onResume": [Function],
            "onStart": [Function],
            "onStop": [Function],
            "onTick": [Function],
          }
        }
        tempo={150}
      >
        <div
          className="tempo"
        >
          <div
            className="tapArea"
            data-testid="beat-taparea"
            onClick={[Function]}
            onTouchEnd={[Function]}
          >
            120
          </div>
        </div>
      </Beat>
    </BeatAxl>
  </div>
</Counter>
`;
